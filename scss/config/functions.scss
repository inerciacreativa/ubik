/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@function power-number($number, $exp) {
	$value: 1;

	@if $exp > 0 {
		@for $i from 1 through $exp {
			$value: $value * $number;
		}
	}
	@else if $exp < 0 {
		@for $i from 1 through -$exp {
			$value: $value / $number;
		}
	}

	@return $value;
}

@function color-luminance($color) {
	$color-rgb: ("red": red($color), "green": green($color), "blue": blue($color));

	@each $name, $value in $color-rgb {
		$adjusted: 0;
		$value: $value / 255;

		@if $value < .03928 {
			$value: $value / 12.92;
		}
		@else {
			$value: ($value + .055) / 1.055;
			$value: power-number($value, 2);
		}

		$color-rgb: map-merge($color-rgb, ($name: $value));
	}

	@return map-get($color-rgb, "red") * .2126 + map-get($color-rgb, "green") * .7152 + map-get($color-rgb, "blue") * .0722;
}

@function color-invert($color) {
	@if color-luminance($color) > .55 {
		@return rgba(#000, .7);
	}
	@else {
		@return #fff;
	}
}

@function color-light($color) {
	@if type_of($color) != color {
		@warn '#{$color} is not a color';
		@return $background;
	}

	$target: 96%;
	@if lightness($color) > 96% {
		$target: lightness($color);
	}

	@return change_color($color, $lightness: $target);
}

@function color-dark($color) {
	@if type_of($color) != color {
		@warn '#{$color} is not a color';
		@return $text-strong;
	}

	$base: 29%;
	$luminance: color-luminance($color);
	$delta: (.53 - $luminance);
	$target: round($base + ($delta * 53));

	@return change_color($color, $lightness: max($base, $target));
}

@function color-rgba($color, $alpha) {
	@if type_of($color) != color {
		@warn '#{$color} is not a color';
		@return $color;
	}

	@return rgba($color, $alpha);
}

@function color-darken($color, $amount) {
	@if type_of($color) != color {
		@warn '#{$color} is not a color';
		@return $color;
	}

	@return darken($color, $amount);
}

@function decimal-round($number, $digits: 0, $mode: round) {
	@if type_of($number) != number {
		@warn '#{$number} is not a number.';
		@return $number;
	}
	@if type_of($digits) != number {
		@warn '#{$digits} is not a number.';
		@return $number;
	}

	$n: 1;
	@if $digits > 0 {
		@for $i from 1 through $digits {
			$n: $n * 10;
		}
	}

	@if $mode == round {
		@return round($number * $n) / $n;
	}
	@if $mode == ceil {
		@return ceil($number * $n) / $n;
	}
	@if $mode == floor {
		@return floor($number * $n) / $n;
	}

	@warn '#{$mode} is undefined keyword.';
	@return $number;
}

@function relative-size($height, $font-size, $unit: none) {
	$size: decimal-round(strip-unit($height) / (strip-unit($font-size) * strip-unit($size-base)), 4, ceil);

	@if $unit == em {
		@return $size * 1em;
	}
	@else if $unit == rem {
		@return $size * 1rem;
	}
	@else if $unit == px {
		@return $size * 1px;
	}

	@return $size;
}

@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function svg-uri($svg) {
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);

	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, '<', '%3C');
		$chunk: str-replace($chunk, '>', '%3E');
		$chunk: str-replace($chunk, '&', '%26');
		$chunk: str-replace($chunk, '#', '%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}

	@return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
