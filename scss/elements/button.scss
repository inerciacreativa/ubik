@use "sass:color";
@use "sass:list";

$button-color: $text-strong !default;
$button-background-color: $white !default;
$button-family: false !default;
$button-border-color: $border !default;
$button-border-width: $control-border-width !default;
$button-padding-vertical: calc(.5em - #{$button-border-width}) !default;
$button-padding-horizontal: 1em !default;
$button-hover-color: $link-hover !default;
$button-hover-background: $link-invert !default;
$button-hover-border-color: $link-hover-border !default;
$button-focus-color: $link-focus !default;
$button-focus-border-color: $link-focus-border !default;
$button-focus-box-shadow-size: 0 0 0 .125em !default;
$button-focus-box-shadow-color: color-rgba($link, .25) !default;
$button-active-color: $link-active !default;
$button-active-border-color: $link-active-border !default;
$button-text-color: $text !default;
$button-text-hover-background-color: $background !default;
$button-text-hover-color: $text-strong !default;
$button-disabled-background-color: $white !default;
$button-disabled-border-color: $border !default;
$button-disabled-shadow: none !default;
$button-disabled-opacity: .5 !default;
$button-static-color: $text-light !default;
$button-static-background-color: $white-ter !default;
$button-static-border-color: $border !default;
$button-icon-size: 1.25em !default;
$button-icon-margin-to-border: -.15em !default;
$button-icon-margin-to-content: .25em !default;
$buttons: false !default;

@mixin button-small {
	border-radius: $radius-small;
	font-size: $size-small;
}

@mixin button-normal {
	font-size: $size-normal;
}

@mixin button-medium {
	font-size: $size-medium;
}

@mixin button-large {
	font-size: $size-large;
}

.button {
	@extend %control;
	@extend %unselectable;
	background-color: $button-background-color;
	border-color: $button-border-color;
	border-width: $button-border-width;
	color: $button-color;
	cursor: pointer;
	@if $button-family {
		font-family: $button-family;
	}
	justify-content: center;
	padding: $button-padding-vertical $button-padding-horizontal;
	text-align: center;
	white-space: nowrap;

	strong {
		color: inherit;
	}

	.icon {
		&,
		&.is-small,
		&.is-medium,
		&.is-large {
			height: $button-icon-size;
			width: $button-icon-size;
		}

		&:first-child:not(:last-child) {
			margin-left: calc(#{$button-icon-margin-to-border} - #{$button-border-width});
			margin-right: $button-icon-margin-to-content;
		}

		&:last-child:not(:first-child) {
			margin-left: $button-icon-margin-to-content;
			margin-right: calc(#{$button-icon-margin-to-border} - #{$button-border-width});
		}

		&:first-child:last-child {
			margin-left: calc(#{$button-icon-margin-to-border} - #{$button-border-width});
			margin-right: calc(#{$button-icon-margin-to-border} - #{$button-border-width});
		}
	}

	// States
	&:hover,
	&.is-hovered {
		background-color: $button-hover-background;
		border-color: $button-hover-border-color;
		color: $button-hover-color;
	}

	&:active,
	&.is-active {
		border-color: $button-active-border-color;
		color: $button-active-color;
	}

	&:focus,
	&.is-focused {
		border-color: $button-focus-border-color;
		color: $button-focus-color;

		&:not(:active) {
			box-shadow: $button-focus-box-shadow-size $button-focus-box-shadow-color;
		}
	}

	// Colors
	@each $name, $pair in $button-colors {
		$background: list.nth($pair, 1);
		$color: list.nth($pair, 2);
		$background-hover: color.adjust($background, $lightness: -2.5%);

		@if length($pair) == 3 or length($pair) == 4 {
			$background-hover: list.nth($pair, 3);
		}

		&.is-#{$name} {
			background-color: $background;
			border-color: transparent;
			color: $color;

			&:hover,
			&.is-hovered {
				background-color: $background-hover;
				border-color: transparent;
				color: $color;
			}

			&:focus,
			&.is-focused {
				border-color: transparent;
				color: $color;

				&:not(:active) {
					box-shadow: $button-focus-box-shadow-size color-rgba($background, .25);
				}
			}

			&:active,
			&.is-active {
				background-color: color.adjust($background, $lightness: -5%);
				border-color: transparent;
				color: $color;
			}

			&[disabled],
			fieldset[disabled] & {
				background-color: $background;
				border-color: transparent;
				box-shadow: none;
			}

			&.is-inverted {
				background-color: $color;
				color: $background;

				&:hover {
					background-color: color.adjust($color, $lightness: -5%);
				}

				&[disabled],
				fieldset[disabled] & {
					background-color: $color;
					border-color: transparent;
					box-shadow: none;
					color: $background;
				}
			}

			&.is-outlined {
				background-color: transparent;
				border-color: $background;
				color: $background;

				&:hover,
				&:focus {
					background-color: $background;
					border-color: $background;
					color: $color;
				}

				&[disabled],
				fieldset[disabled] & {
					background-color: transparent;
					border-color: $background;
					box-shadow: none;
					color: $background;
				}
			}

			&.is-inverted.is-outlined {
				background-color: transparent;
				border-color: $color;
				color: $color;

				&:hover,
				&:focus {
					background-color: $color;
					color: $background;
				}

				&[disabled] {
					background-color: transparent;
					border-color: $color;
					box-shadow: none;
					color: $color;
				}
			}
		}
	}

	// Sizes
	&.is-small {
		@include button-small;
	}

	&.is-normal {
		@include button-normal;
	}

	&.is-medium {
		@include button-medium;
	}

	&.is-large {
		@include button-large;
	}

	// Modifiers
	/* stylelint-disable no-descending-specificity */
	&[disabled],
	fieldset[disabled] & {
		background-color: $button-disabled-background-color;
		border-color: $button-disabled-border-color;
		box-shadow: $button-disabled-shadow;
		opacity: $button-disabled-opacity;
	}

	/* stylelint-enable */

	&.is-fullwidth {
		display: flex;
		width: 100%;
	}

	&.is-static {
		background-color: $button-static-background-color;
		border-color: $button-static-border-color;
		color: $button-static-color;
		box-shadow: none;
		pointer-events: none;
	}

	&.is-rounded {
		border-radius: $radius-rounded;
		padding-left: calc(#{$button-padding-horizontal} + .25em);
		padding-right: calc(#{$button-padding-horizontal} + .25em);
	}
}

@if $buttons {
	.buttons {
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-start;

		.button {
			margin-bottom: .5rem;

			&:not(:last-child):not(.is-fullwidth) {
				margin-right: .5rem;
			}
		}

		&:last-child {
			margin-bottom: -.5rem;
		}

		&:not(:last-child) {
			margin-bottom: 1rem;
		}

		/* stylelint-disable no-descending-specificity */
		&.has-addons {
			.button {
				&:not(:first-child) {
					border-bottom-left-radius: 0;
					border-top-left-radius: 0;
				}

				&:not(:last-child) {
					border-bottom-right-radius: 0;
					border-top-right-radius: 0;
					margin-right: -1px;
				}

				&:last-child {
					margin-right: 0;
				}

				&:hover,
				&.is-hovered {
					z-index: 2;
				}

				&:focus,
				&.is-focused,
				&:active,
				&.is-active,
				&.is-selected {
					z-index: 3;

					&:hover {
						z-index: 4;
					}
				}
			}
		}

		/* stylelint-enable */

		&.is-centered {
			justify-content: center;
		}

		&.is-right {
			justify-content: flex-end;
		}
	}
}
